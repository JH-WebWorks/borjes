%YAML 1.2
--- # Simple English Grammar
Predicates:
    Prod: !lisp |
        (fn (:x 1 :y 1 :z 1)
            (* x y z))
    Concat: !js/function >
        return Array.prototype.slice.call(arguments).join('');

Rules:
    S(Concat(a,"->",b),Prod(prob1,prob2,0.5)):
    - NP(a,prob1) VP(b,prob2)
    - S(a,prob1) ConjS(b,prob2)

    NP(lex,Prod(prob1,prob2)):
    - Det(_,prob1) NP(lex,prob2)
    - Adj(_,prob1) NP(lex,prob2)
    - NP(lex,prob2) ToVP(_,prob1)
    - NP(lex,prob2) PP(_,prob1)
    - NP(lex,prob2) REL(_,prob1)

    VP(lex,Prod(prob1,prob2)):
    - Adv(_,prob1) VP(lex,prob2)
    - VP(lex,prob2) Adv(_,prob1)
    - VP(lex,prob2) NP(_,prob1)
    - VP(lex,prob2) Adj(_,prob1)
    - VP(lex,prob2) PP(_,prob1)

    PP(lex,Prod(prob1,prob2)):
    - Prep(_,prob1) NP(lex,prob2)

    REL(lex,Prod(prob1,prob2)):
    - That(_,prob1) VP(lex,prob2)

    ConjS(lex,Prod(prob1,prob2)):
    - Conj(_,prob1) S(lex,prob2)

    ToVP(lex,Prod(prob1,prob2)):
    - To(_,prob1) VP(lex,prob2)

Lexicon:
    NP(0,1): [ John, Mary, dog, store, lettuce, salad, program, code, student, professor, he ]
    VP(0,1): [ loves, likes, walks, runs, drives, buys, make, writes, works, comments, enjoys ]
    Conj(0,1): [ and ]
    To(0,1): [ to(0.8) ]
    That(0,1): [ that ]
    Det(0,1): [ the, a, his ]
    Adj(0,1): [ brown, grocery, short, good, "John's" ]
    Adv(0,1): [ deeply, quickly, correctly ]
    Prep(0,1): [ to(0.2), for, like ]
